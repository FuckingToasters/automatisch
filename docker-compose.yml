version: '3.0'

services:
  postgres-automatisch:
    container_name: postgres-automatisch
    image: 'postgres:14.5'
    restart: unless-stopped
    networks:
      - revproxy
    env_file:
      - "./automatisch.env"
    volumes:
      - automatisch_pg_data:/var/lib/postgresql/data

    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis-automatisch:
    container_name: redis-automatisch
    image: 'redis:7.0.4'
    restart: unless-stopped
    volumes:
    - redis_automatisch_data:/data
    networks:
      - revproxy

  automatisch-main:
    container_name: automatisch-main
    build:
      context: /docker/automatisch/setup
      dockerfile: Dockerfile.compose
    entrypoint: /compose-entrypoint.sh
    restart: unless-stopped
    #ports:
      #- '3000:3000'
    networks:
      - revproxy
    depends_on:
      postgres-automatisch:
        condition: service_healthy
      redis-automatisch:
        condition: service_started
    env_file:
      - "./automatisch.env"
    volumes:
      - automatisch_storage:/automatisch/storage

  automatisch-worker:
    container_name: automatisch-worker
    build:
      context: /docker/automatisch/setup
      dockerfile: Dockerfile.compose
    entrypoint: /compose-entrypoint.sh
    networks:
      - revproxy
    depends_on:
      - automatisch-main
    env_file:
      - "./automatisch.env"
    volumes:
      - automatisch_storage:/automatisch/storage

volumes:
  # postgres volumes
  automatisch_pg_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /docker/automatisch/pg_data

  # redis volumes
  redis_automatisch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /docker/automatisch/redis_data

  # service volumes
  automatisch_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /docker/automatisch/storage

networks:
  revproxy:
    external: true
